class	url	experimental	unstable	obsolete	deprecated	description
AggregateError	/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError	true	false	false	false	The AggregateError object represents an error when several errors need to be wrapped in a single error. It is thrown when multiple errors need to be reported by an operation, for example by Promise.any(), when all promises passed to it reject.
Array	/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array	false	false	false	false	The JavaScript Array class is a global object that is used in the construction of arrays; which are high-level, list-like objects.
ArrayBuffer	/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer	false	false	false	false	The ArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer.
AsyncFunction	/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction	false	false	false	false	The AsyncFunction constructor creates a new async function object. In JavaScript, every asynchronous function is actually an AsyncFunction object.
Atomics	/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics	false	false	false	false	The Atomics object provides atomic operations as static methods. They are used with SharedArrayBuffer and ArrayBuffer objects.
BigInt	/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt	false	false	false	false	BigInt is a built-in object that provides a way to represent whole numbers larger than 253 - 1, which is the largest number JavaScript can reliably represent with the Number primitive and represented by the Number.MAX_SAFE_INTEGER constant. BigInt can be used for arbitrarily large integers.
BigInt64Array	/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array	false	false	false	false	The BigInt64Array typed array represents an array of 64-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0n. Once established, you can reference elements in the array using the object's methods, or by using standard array index syntax (that is, using bracket notation).
BigUint64Array	/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array	false	false	false	false	The BigUint64Array typed array represents an array of 64-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0n. Once established, you can reference elements in the array using the object's methods, or by using standard array index syntax (that is, using bracket notation).
Boolean	/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean	false	false	false	false	The Boolean object is an object wrapper for a boolean value.
DataView	/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView	false	false	false	false	The DataView view provides a low-level interface for reading and writing multiple number types in a binary ArrayBuffer, without having to care about the platform's endianness.
Date	/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date	false	false	false	false	JavaScript Date objects represent a single moment in time in a platform-independent format.
Error	/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error	false	false	false	false	Error objects are thrown when runtime errors occur. The Error object can also be used as a base object for user-defined exceptions. See below for standard built-in error types.
EvalError	/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError	false	false	false	false	The EvalError object indicates an error regarding the global eval() function. This exception is not thrown by JavaScript anymore, however the EvalError object remains for compatibility.
FinalizationRegistry	/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry	false	false	false	false	A FinalizationRegistry object lets you request a callback when an object is garbage-collected.
Float32Array	/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array	false	false	false	false	The Float32Array typed array represents an array of 32-bit floating point numbers (corresponding to the C float data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).
Float64Array	/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array	false	false	false	false	The Float64Array typed array represents an array of 64-bit floating point numbers (corresponding to the C double data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).
Function	/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function	false	false	false	false	Every JavaScript function is actually a Function object. This can be seen with the code (function(){}).constructor === Function, which returns true.
Generator	/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator	false	false	false	false	The Generator object is returned by a generator function and it conforms to both the iterable protocol and the iterator protocol.
GeneratorFunction	/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction	false	false	false	false	The GeneratorFunction constructor creates a new generator function object. In JavaScript, every generator function is actually a GeneratorFunction object.
Infinity	/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity	false	false	false	false	The global property Infinity is a numeric value representing infinity.
Int16Array	/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array	false	false	false	false	The Int16Array typed array represents an array of twos-complement 16-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).
Int32Array	/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array	false	false	false	false	The Int32Array typed array represents an array of twos-complement 32-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).
Int8Array	/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array	false	false	false	false	The Int8Array typed array represents an array of twos-complement 8-bit signed integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).
InternalError	/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError	false	false	false	false	The InternalError object indicates an error that occurred internally in the JavaScript engine.
Intl	/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl	false	false	false	false	The Intl object is the namespace for the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, and date and time formatting. The Intl object provides access to several constructors as well as functionality common to the internationalization constructors and other language sensitive functions.
JSON	/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON	false	false	false	false	The JSON object contains methods for parsing JavaScript Object Notation (JSON) and converting values to JSON. It can't be called or constructed, and aside from its two method properties, it has no interesting functionality of its own.
Map	/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map	false	false	false	false	The Map object holds key-value pairs and remembers the original insertion order of the keys.
Math	/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math	false	false	false	false	Math is a built-in object that has properties and methods for mathematical constants and functions. Itâ€™s not a function object.
NaN	/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN	false	false	false	false	The global NaN property is a value representing Not-A-Number.
Number	/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number	false	false	false	false	The Number constructor contains constants and methods for working with numbers. Values of other types can be converted to numbers using the Number() function.
Object	/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object	false	false	false	false	The Object class represents one of JavaScript's data types. It is used to store various keyed collections and more complex entities. Objects can be created using the Object() constructor or the object initializer / literal syntax.
Promise	/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise	false	false	false	false	The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value.
Proxy	/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy	false	false	false	false	The Proxy object enables you to create a proxy for another object, which can intercept and redefine fundamental operations for that object.
RangeError	/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError	false	false	false	false	The RangeError object indicates an error when a value is not in the set or range of allowed values.
ReferenceError	/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError	false	false	false	false	The ReferenceError object represents an error when a non-existent variable is referenced.
Reflect	/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect	false	false	false	false	Reflect is a built-in object that provides methods for interceptable JavaScript operations. The methods are the same as those of proxy handlers. Reflect is not a function object, so it's not constructible.
RegExp	/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp	false	false	false	false	The RegExp object is used for matching text with a pattern.
Set	/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set	false	false	false	false	The Set object lets you store unique values of any type, whether primitive values or object references.
SharedArrayBuffer	/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer	false	false	false	false	The SharedArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer, similar to the ArrayBuffer object, but in a way that they can be used to create views on shared memory. Unlike an ArrayBuffer, a SharedArrayBuffer cannot become detached.
String	/en-US/docs/Web/JavaScript/Reference/Global_Objects/String	false	false	false	false	The String object is used to represent and manipulate a sequence of characters.
Symbol	/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol	false	false	false	false	The data type symbol is a primitive data type. The Symbol() function returns a value of type symbol, has static properties that expose several members of built-in objects, has static methods that expose the global symbol registry, and resembles a built-in object class, but is incomplete as a constructor because it does not support the syntax \"new Symbol()\".
SyntaxError	/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError	false	false	false	false	The SyntaxError object represents an error when trying to interpret syntactically invalid code. It is thrown when the JavaScript engine encounters tokens or token order that does not conform to the syntax of the language when parsing code.
TypeError	/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError	false	false	false	false	The TypeError object represents an error when an operation could not be performed, typically (but not exclusively) when a value is not of the expected type.
TypedArray	/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray	false	false	false	false	A TypedArray object describes an array-like view of an underlying binary data buffer. There is no global property named TypedArray, nor is there a directly visible TypedArray constructor.  Instead, there are a number of different global properties, whose values are typed array constructors for specific element types, listed below. On the following pages you will find common properties and methods that can be used with any typed array containing elements of any type.
URIError	/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError	false	false	false	false	The URIError object represents an error when a global URI handling function was used in a wrong way.
Uint16Array	/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array	false	false	false	false	The Uint16Array typed array represents an array of 16-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).
Uint32Array	/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array	false	false	false	false	The Uint32Array typed array represents an array of 32-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).
Uint8Array	/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array	false	false	false	false	The Uint8Array typed array represents an array of 8-bit unsigned integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).
Uint8ClampedArray	/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray	false	false	false	false	The Uint8ClampedArray typed array represents an array of 8-bit unsigned integers clamped to 0-255; if you specified a value that is out of the range of [0,255], 0 or 255 will be set instead; if you specify a non-integer, the nearest integer will be set. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).
WeakMap	/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap	false	false	false	false	The WeakMap object is a collection of key/value pairs in which the keys are weakly referenced. The keys must be objects and the values can be arbitrary values.
WeakRef	/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef	false	false	false	false	A WeakRef object lets you hold a weak reference to another object, without preventing that object from getting garbage-collected.
WeakSet	/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet	false	false	false	false	The WeakSet object lets you store weakly held objects in a collection.
WebAssembly	/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly	false	false	false	false	The WebAssembly JavaScript object acts as the namespace for all WebAssembly-related functionality.
decodeURI	/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI	false	false	false	false	The decodeURI() function decodes a Uniform Resource Identifier (URI) previously created by encodeURI() or by a similar routine.
decodeURIComponent	/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent	false	false	false	false	The decodeURIComponent() function decodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent or by a similar routine.
encodeURI	/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI	false	false	false	false	The encodeURI() function encodes a URI by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two \"surrogate\" characters).
encodeURIComponent	/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent	false	false	false	false	The encodeURIComponent() function encodes a URI by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two \"surrogate\" characters).
escape	/en-US/docs/Web/JavaScript/Reference/Global_Objects/escape	false	false	false	true	The escape() function computes a new string in which certain characters have been replaced by a hexadecimal escape sequence.
eval	/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval	false	false	false	false	The eval() function evaluates JavaScript code represented as a string.
globalThis	/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis	false	false	false	false	The global globalThis property contains the global this value, which is akin to the global object.
isFinite	/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite	false	false	false	false	The global isFinite() function determines whether the passed value is a finite number. If  needed, the parameter is first converted to a number.
isNaN	/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN	false	false	false	false	The isNaN() function determines whether a value is NaN or not. Note, coercion inside the isNaN function has interesting rules; you may alternatively want to use Number.isNaN(), as defined in ECMAScript 2015.
null	/en-US/docs/Web/JavaScript/Reference/Global_Objects/null	false	false	false	false	The value null represents the intentional absence of any object value. It is one of JavaScript's primitive values and is treated as falsy for boolean operations.
parseFloat	/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat	false	false	false	false	The parseFloat() function parses an argument (converting it to a string first if needed) and returns a floating point number.
parseInt	/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt	false	false	false	false	The parseInt() function parses a string argument and returns an integer of the specified radix (the base in mathematical numeral systems).
undefined	/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined	false	false	false	false	The global undefined property represents the primitive value undefined. It is one of JavaScript's primitive types.
unescape	/en-US/docs/Web/JavaScript/Reference/Global_Objects/unescape	false	false	false	true	The unescape() function computes a new string in which hexadecimal escape sequences are replaced with the character that it represents. The escape sequences might be introduced by a function like escape. Usually, decodeURI or decodeURIComponent are preferred over unescape.
uneval	/en-US/docs/Web/JavaScript/Reference/Global_Objects/uneval	false	true	false	false	The uneval() function creates a string representation of the source code of an Object.
